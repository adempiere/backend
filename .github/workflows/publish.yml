# This workflow will build a Java project with Gradle
# This file was contributed by EdwinBetanc0urt@outlook.com from ERP Consultores y Asociados, C.A
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Publish Project

on:
  release:
    types:
      - created

jobs:

  # Build dist application ADempiere-gRPC-Server
  build-app:
    name: Build dist ADempiere-gRPC-Server
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt-hotspot'
          java-version: 8

      - name: get adempiere source
        run: |
          download_repo="https://github.com/erpcya/adempiere/releases/download/3.9.3-rs-4.0/Adempiere_393LTS.tar.gz"
          wget $download_repo -c -O Adempiere.tar.gz

      - name: uncompress file
        run: tar -xzf Adempiere.tar.gz

      - name: create dependences folder
        run: mkdir dependences
      - name: move dependences
        run: mv Adempiere/lib/*.jar dependences/
      - name: move packages
        run: mv Adempiere/packages/*/lib/*.jar dependences/

      - name: Build with Gradle
        run: gradle createRelease

      - name: Upload dist app zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: adempiere-gRPC-Server.zip
          path: build/release/adempiere-gRPC-Server.zip

      - name: Upload dist app zip.MD5 artifact
        uses: actions/upload-artifact@v2
        with:
          name: adempiere-gRPC-Server.zip.MD5
          path: build/release/adempiere-gRPC-Server.zip.MD5

      - name: Upload dist app tar artifact
        uses: actions/upload-artifact@v2
        with:
          name: adempiere-gRPC-Server.tar
          path: build/release/adempiere-gRPC-Server.tar

      - name: Upload dist app tar.MD5 artifact
        uses: actions/upload-artifact@v2
        with:
          name: adempiere-gRPC-Server.tar.MD5
          path: build/release/adempiere-gRPC-Server.tar.MD5


  publish-binaries:
    name: Upload Binaries ADempiere-gRPC-Server
    needs: build-app
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Upload zip
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: adempiere-gRPC-Server.zip/adempiere-gRPC-Server.zip

      - name: Upload zip.MD5
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: adempiere-gRPC-Server.zip.MD5/adempiere-gRPC-Server.zip.MD5

      - name: Upload tar
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: adempiere-gRPC-Server.tar/adempiere-gRPC-Server.tar

      - name: Upload tar.MD5
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: adempiere-gRPC-Server.tar.MD5/adempiere-gRPC-Server.tar.MD5


  # Publish docker image in Github Container Registry to application
  push-imame-ghcr:
    name: Push Docker image to GitHub Container
    needs: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Download build dist app
        uses: actions/download-artifact@v2
        with:
          name: adempiere-gRPC-Server.zip
          path: dist

      - name: Unzip dist file
        run: |
          cd dist
          unzip -o adempiere-gRPC-Server.zip

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Lower Case to owner and repository
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
          echo "REPO_LC=${NAME,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
          NAME: '${{ github.event.repository.name }}'

      - name: Push image in GH Container
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build-docker/Dockerfile.prod
          push: true
          # load: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.REPO_LC }}:latest
            ghcr.io/${{ env.OWNER_LC }}/${{ env.REPO_LC }}:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.REPO_LC }}:${{ github.event.release.tag_name }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


  # Publish docker image in Docker Hub registry to application
  push-imame-dhr:
    name: Push Docker image to Docker Hub
    needs:
      - build-app
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Download build dist app
        uses: actions/download-artifact@v2
        with:
          name: adempiere-gRPC-Server.zip
          path: dist

      - name: Unzip dist file
        run: |
          cd dist
          unzip -o adempiere-gRPC-Server.zip

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          # CONFIGURE DOCKER SECRETS INTO REPOSITORY
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Lower Case to owner and repository
        run: |
          ORG=$OWNER
          if [ -n "${{ secrets.DOCKERHUB_ORG }}" ]; then
            echo "Set secret DOCKERHUB_ORG as namespace"
            ORG=${{ secrets.DOCKERHUB_ORG }}
          else
            echo "Set OWNER ($OWNER) as namespace "
          fi
          echo "ORG_LC=${ORG,,}" >> ${GITHUB_ENV}
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
          echo "REPO_LC=${NAME,,}" >> ${GITHUB_ENV}
        env:
          # to docker image namespace
          OWNER: '${{ github.repository_owner }}'
          NAME: '${{ github.event.repository.name }}'

      - name: Push image in Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build-docker/Dockerfile.prod
          push: true
          tags: |
            ${{ env.ORG_LC }}/${{ env.REPO_LC }}:latest
            ${{ env.ORG_LC }}/${{ env.REPO_LC }}:${{ github.sha }}
            ${{ env.ORG_LC }}/${{ env.REPO_LC }}:${{ github.event.release.tag_name }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
